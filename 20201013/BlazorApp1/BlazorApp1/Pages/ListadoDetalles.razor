@page "/ListadoDetalles"
@using BlazorApp1.Data
@inject DetalleService  ServicioDetalle
@inject NavigationManager navigation
@inject IJSRuntime JsRuntime

<h1>Listado de Detalles</h1>

<button class="btn" @onclick="()=>Editar(0)">Nuevo</button>

@if (Detalle == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Fecha</th>
                <th>Tiempo</th>
                
                <th>TareaId</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var f in Detalle)
            {
            <tr>
                <td>@f.Id</td>
                <td>@f.Fecha</td>
                <td>@f.Tiempo</td>
                
                <td>@f.TareaId</td>
                <td><button class="btn" @onclick="()=>Editar(f.Id)">Editar</button> <button class="btn" @onclick="()=>Borrar(f.Id)">Borrar</button></td>
            </tr>
            }
        </tbody>
    </table>
}

@code {
    /*

    <th>Recurso</th>
    <th>Tarea</th>


    <td>@f.Recurso</td>
    <td>@f.Tarea</td>
    */



    /*
    private Detalle[] detalle;

    protected override async Task OnInitializedAsync()
    {
        detalle = ServicioDetalle.GetDatalles();
    }
    */

    private List<Detalle> Detalle;

    protected override async Task OnInitializedAsync()
    {
        Detalle = await ServicioDetalle.GetAll();
    }

    protected void Editar(int id)
    {
        navigation.NavigateTo("/EditarDetalle/" + id);
    }

    async Task Borrar(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Desea elimiar a este detalle?");
        if (confirmed)
        {
            await ServicioDetalle.Remove(id);
            Detalle = await ServicioDetalle.GetAll();
        }
    }
}
